Sploit 2 explanation

The vulnerability in target2 is a simple variant of a buffer overflow vulnerability, most known as 1-byte buffer overflow. The problem in the code is the loop comparison which wrongly checks the number of characters copied: in fact, one more character (1 byte) is copied into the buffer. In order to exploit this vulnerability, we need a different approach. First, it is useful to notice that the additional character copied is written in the Extended Base Pointer (ebp) which is essential to return control to the previous function. So, we can overwrite the ebp to make it point to a different address and then point to the shellcode. By giving a 240-long string, the last character copied will be a NULL value resulting in the last byte of the ebp to be "00". Fortunately, this address is in the range of our buffer. We just need to create a string with some padding at the beginning until or slightly after where the modified ebp address (with "00" in the end) points. Right there, we can insert the address where our shellcode is, we can place the shell right after this address (so 4 bytes after). Then some other padding in the end to fill the buffer. Once every detail is computed correctly, the shell appears.
